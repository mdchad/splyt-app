{"version":3,"sources":["hooks/Dimension.tsx","Components/LeafletMap/LeafletMap.tsx","Components/Settings/Settings.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getWindowDimensions","_window","window","width","innerWidth","height","innerHeight","LeafletMap","_ref","data","position","_useWindowDimensions","_useState","useState","_useState2","Object","slicedToArray","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","zoom","icon","divIcon","className","iconAnchor","popupAnchor","html","react_default","a","createElement","Map","center","lat","lng","TileLayer","attribution","url","Marker","Popup","drivers","map","driver","location","latitude","longitude","key","driver_id","handle","props","value","dragging","index","restProps","objectWithoutProperties","es","prefixCls","overlay","visible","placement","rc_slider_es","assign","Settings","count","setCount","loading","disabled","min","max","defaultValue","onAfterChange","App","pickup_eta","setData","_useState3","_useState4","onLoad","_useState5","_useState6","_useState7","_useState8","targetUrl","concat","fetchData","asyncToGenerator","regenerator_default","mark","_callee","result","fetchedData","wrap","_context","prev","next","console","log","fetch","sent","json","t0","error","stop","apply","this","arguments","LoadingOverlay_default","active","spinner","text","Components_LeafletMap_LeafletMap","Components_Settings_Settings","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c1c4a7a.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nfunction getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height\n    };\n}\n\nexport default function useWindowDimensions() {\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n    useEffect(() => {\n        function handleResize() {\n            setWindowDimensions(getWindowDimensions());\n        }\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    return windowDimensions;\n}\n","import React from 'react';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet'\nimport { Drivers, Position } from '../../interface';\nimport {divIcon, DivIcon} from 'leaflet';\nimport './LeafletMap.css'\nimport useWindowDimensions from \"../../hooks/Dimension\";\n\ninterface Props {\n    data: { pickup_eta: number, drivers: Drivers[]}\n    position: Position;\n}\n\nconst LeafletMap: React.FC<Props> = ({ data, position }) => {\n    const { height, width } = useWindowDimensions();\n    const zoom = width < 376 ? 13 : 14;\n\n    const icon: DivIcon = divIcon({\n        className: '',\n        iconAnchor: [0, 24],\n        popupAnchor: [0, -36],\n        html: `<span class='custom-pin'>HQ</span>`\n    });\n\n    return (\n        <div className='map-height'>\n            <Map center={[position.lat, position.lng]} zoom={zoom} className='map-height'>\n                <TileLayer\n                    attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n                <Marker position={[position.lat, position.lng]} icon={icon}>\n                    <Popup>\n                        Splyt HQ\n                    </Popup>\n                </Marker>\n                {data.drivers.map(driver => {\n                    return <Marker position={[driver.location.latitude, driver.location.longitude]} key={driver.driver_id}>\n                        <Popup>\n                            { driver.driver_id}\n                        </Popup>\n                    </Marker>\n                })}\n            </Map>\n        </div>\n    )\n};\n\nexport default LeafletMap\n","import 'rc-slider/assets/index.css';\nimport 'rc-tooltip/assets/bootstrap.css';\nimport React from 'react';\nimport Tooltip from 'rc-tooltip';\nimport Slider, { Handle } from 'rc-slider';\nimport './Settings.css';\n\ninterface Props {\n    count: number;\n    setCount: (v: number) => void;\n    loading: boolean;\n}\n\nconst handle = (props: any) => {\n    const { value, dragging, index, ...restProps } = props;\n    return (\n        <Tooltip\n            prefixCls=\"rc-slider-tooltip\"\n            overlay={value}\n            visible={dragging}\n            placement=\"top\"\n            key={index}\n        >\n            <Handle value={value} {...restProps} />\n        </Tooltip>\n    );\n};\n\nconst Settings: React.FC<Props> = ({ count, setCount, loading }) => {\n    return (\n        <div className='settings-wrapper' >\n            <p>Drivers</p>\n            <Slider disabled={loading} min={0} max={50} defaultValue={count} handle={handle} onAfterChange={(value) => setCount(value)}/>\n            <span>{count}</span>\n        </div>\n    )\n};\n\nexport default Settings\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport LeafletMap from './Components/LeafletMap/LeafletMap';\nimport Settings from './Components/Settings/Settings';\nimport LoadingOverlay from 'react-loading-overlay';\nimport {Drivers, Position } from './interface';\n\nconst App: React.FC = () => {\n    const [data, setData] = useState<{pickup_eta: number, drivers: Drivers[]}>({ pickup_eta: 0, drivers: [] });\n    const [loading, onLoad] = useState<boolean>(false);\n    const [count, setCount] = useState<number>(1);\n    const [position, setPosition] = useState<Position>({ lat: 51.5049375, lng: -0.0964509 });\n    const proxyUrl: string = 'https://cors-anywhere.herokuapp.com/';\n    const targetUrl: string = `https://qa-interview-test.qa.splytech.io/api/drivers?latitude=${position.lat}&longitude=${position.lng}&count=${count}`;\n    const fetchData = async () => {\n        try {\n            onLoad(true);\n            console.log('shgssd')\n            const result: Response = await fetch(proxyUrl + targetUrl);\n            const fetchedData: { pickup_eta: number, drivers: Drivers[] } = await result.json();\n            setData(fetchedData);\n            onLoad(false);\n        } catch (e) {\n            console.error(e)\n        }\n    };\n\n    useEffect(() => {\n        fetchData()\n}, [count, targetUrl]);\n\n    return (\n        <div className='App'>\n            <LoadingOverlay active={loading}\n                            spinner\n                            text={'Fetching drivers'}>\n                <LeafletMap data={data} position={position}/>\n            </LoadingOverlay>\n            <Settings loading={loading} count={count} setCount={setCount}/>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}